一个传输时隙为常数t，包括了必要的守护时间和传输时间。一个帧的时间为T，所以一个节点所分配的传输速率为   r=1/T。在每个传输的头部包含了一个位图bitmap，用来交换时隙信息。
时隙分配有以下的限制
时间限制：在一跳和两跳范围内不允许有重叠发生。如图VeSOMAC时隙分配.jpg所示，除了A和D之外，其他的配对均在一跳或者两跳范围内，这些配对中时序上不会重叠。
关于时隙分配的信息，是通过交换每个包头部的位图向量信息来得到的。

图时隙bitmap图
一个节点可以通知其邻居节点一个关于当前节点一跳范围内时隙占用情况，所以任意一个节点可以感知到其一跳和两跳范围内的时隙占用情况。这个信息可以让当前节点选择一个不重叠于一跳和两跳节点的时隙。

对于一跳的邻居i和j，i选择的时隙应该能被j的bitmap向量所表示。
需要一个迭代的算法来收敛不稳定的情况。更大的位数能加快收敛速度。
当节点没有数据发送时，还是必须发送数据，其中包含bitmap头部和一个空白内容的数据。
时隙上的先后顺序必须与车在行走方向上的先后顺序一致。参见图不同时隙安排图。这个约束条件唯一不好的就是会降低自配置的收敛过程。
可许时间区域是指那些位图中共同标为0的的时间区域。伸缩区域是指在可许时间区域中还进一步满足先后的逻辑顺序的时间区域。
图 许可时间和伸缩区域时间图.jpg
许可时间和伸缩区域时间图.jpg 讲解

对于新加入的车载终端节点，如果能找到伸缩区域，则直接使用即可。
图 迭代的时隙移动聚合.jpg
如果找不到伸缩区域，则先选择一个没有冲突的时隙，跟在其他时隙之后。
图 迭代的时隙移动聚合.jpg  解释
总得来说，这个协议的核心是，每个车载终端节点迭代的移动自己的时隙跟在它上一辆车之后的时隙，知道所有的节点时隙都满足以上约束。

如果去除先后顺序约束，那么省掉了收敛过程。

一个车载终端节点必须看到它一跳范围的终端节点中bitmap里边自己的那位为1。因此bitmap位图可用于检测冲突。


一个很极端的情况，当所有的终端节点加入网络时，所有节点都选择同一个时隙，都不监听。因此，需要有一个随机的退避。
